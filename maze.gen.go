// Package maze provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.15.0 DO NOT EDIT.
package main

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	PlayerAPIScopes = "PlayerAPI.Scopes"
)

// Defines values for GameStateDTOGamePhase.
const (
	GameStateDTOGamePhaseExploration  GameStateDTOGamePhase = "Exploration"
	GameStateDTOGamePhaseFinished     GameStateDTOGamePhase = "Finished"
	GameStateDTOGamePhaseSpeedRunning GameStateDTOGamePhase = "SpeedRunning"
)

// Defines values for GameStateDTOState.
const (
	GameStateDTOStateFinished GameStateDTOState = "Finished"
	GameStateDTOStatePlaying  GameStateDTOState = "Playing"
	GameStateDTOStateWaiting  GameStateDTOState = "Waiting"
)

// Defines values for GameStateDTOWalls.
const (
	GameStateDTOWallsDown  GameStateDTOWalls = "Down"
	GameStateDTOWallsLeft  GameStateDTOWalls = "Left"
	GameStateDTOWallsRight GameStateDTOWalls = "Right"
	GameStateDTOWallsUp    GameStateDTOWalls = "Up"
)

// Defines values for MoveRequestDirection.
const (
	MoveRequestDirectionDown      MoveRequestDirection = "Down"
	MoveRequestDirectionLeft      MoveRequestDirection = "Left"
	MoveRequestDirectionLeftDown  MoveRequestDirection = "LeftDown"
	MoveRequestDirectionLeftUp    MoveRequestDirection = "LeftUp"
	MoveRequestDirectionRight     MoveRequestDirection = "Right"
	MoveRequestDirectionRightDown MoveRequestDirection = "RightDown"
	MoveRequestDirectionRightUp   MoveRequestDirection = "RightUp"
	MoveRequestDirectionUp        MoveRequestDirection = "Up"
)

// Defines values for PlayerRegistrationResponseStatus.
const (
	Invalid    PlayerRegistrationResponseStatus = "Invalid"
	Registered PlayerRegistrationResponseStatus = "Registered"
)

// Emoji defines model for Emoji.
type Emoji struct {
	Aliases     []string `json:"aliases"`
	Description string   `json:"description"`
	Emoji       string   `json:"emoji"`
}

// GameScore defines model for GameScore.
type GameScore struct {
	Exploration  *int32 `json:"exploration,omitempty"`
	SpeedRunning *int32 `json:"speedRunning,omitempty"`
}

// GameStateDTO defines model for GameStateDTO.
type GameStateDTO struct {
	GameId    *openapi_types.UUID    `json:"gameId,omitempty"`
	GamePhase *GameStateDTOGamePhase `json:"gamePhase,omitempty"`
	NrOfMoves *int32                 `json:"nrOfMoves,omitempty"`
	Position  *Point                 `json:"position,omitempty"`
	Score     *GameScore             `json:"score,omitempty"`
	State     GameStateDTOState      `json:"state"`
	Walls     *[]GameStateDTOWalls   `json:"walls,omitempty"`
}

// GameStateDTOGamePhase defines model for GameStateDTO.GamePhase.
type GameStateDTOGamePhase string

// GameStateDTOState defines model for GameStateDTO.State.
type GameStateDTOState string

// GameStateDTOWalls defines model for GameStateDTO.Walls.
type GameStateDTOWalls string

// MoveRequest defines model for MoveRequest.
type MoveRequest struct {
	Direction MoveRequestDirection `json:"direction"`
	GameId    openapi_types.UUID   `json:"gameId"`
	PlayerId  openapi_types.UUID   `json:"playerId"`
}

// MoveRequestDirection defines model for MoveRequest.Direction.
type MoveRequestDirection string

// PlayerRegistrationRequest defines model for PlayerRegistrationRequest.
type PlayerRegistrationRequest struct {
	EmojiAlias string `json:"emojiAlias"`
	Name       string `json:"name"`
	Password   string `json:"password"`
}

// PlayerRegistrationResponse defines model for PlayerRegistrationResponse.
type PlayerRegistrationResponse struct {
	Id      *openapi_types.UUID              `json:"id,omitempty"`
	Message *string                          `json:"message,omitempty"`
	Status  PlayerRegistrationResponseStatus `json:"status"`
}

// PlayerRegistrationResponseStatus defines model for PlayerRegistrationResponse.Status.
type PlayerRegistrationResponseStatus string

// Point defines model for Point.
type Point struct {
	X int32 `json:"x"`
	Y int32 `json:"y"`
}

// MoveJSONRequestBody defines body for Move for application/json ContentType.
type MoveJSONRequestBody = MoveRequest

// RegisterPlayerJSONRequestBody defines body for RegisterPlayer for application/json ContentType.
type RegisterPlayerJSONRequestBody = PlayerRegistrationRequest

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// MoveWithBody request with any body
	MoveWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Move(ctx context.Context, body MoveJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RegisterPlayerWithBody request with any body
	RegisterPlayerWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	RegisterPlayer(ctx context.Context, body RegisterPlayerJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSupportedEmoji request
	GetSupportedEmoji(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCurrentGameState request
	GetCurrentGameState(ctx context.Context, playerId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) MoveWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMoveRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Move(ctx context.Context, body MoveJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMoveRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RegisterPlayerWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRegisterPlayerRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RegisterPlayer(ctx context.Context, body RegisterPlayerJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRegisterPlayerRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSupportedEmoji(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSupportedEmojiRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCurrentGameState(ctx context.Context, playerId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCurrentGameStateRequest(c.Server, playerId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewMoveRequest calls the generic Move builder with application/json body
func NewMoveRequest(server string, body MoveJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewMoveRequestWithBody(server, "application/json", bodyReader)
}

// NewMoveRequestWithBody generates requests for Move with any type of body
func NewMoveRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/game/move")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRegisterPlayerRequest calls the generic RegisterPlayer builder with application/json body
func NewRegisterPlayerRequest(server string, body RegisterPlayerJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewRegisterPlayerRequestWithBody(server, "application/json", bodyReader)
}

// NewRegisterPlayerRequestWithBody generates requests for RegisterPlayer with any type of body
func NewRegisterPlayerRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/player")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetSupportedEmojiRequest generates requests for GetSupportedEmoji
func NewGetSupportedEmojiRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/player/supported-emoji")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCurrentGameStateRequest generates requests for GetCurrentGameState
func NewGetCurrentGameStateRequest(server string, playerId openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "playerId", runtime.ParamLocationPath, playerId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/player/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// MoveWithBodyWithResponse request with any body
	MoveWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*MoveResponse, error)

	MoveWithResponse(ctx context.Context, body MoveJSONRequestBody, reqEditors ...RequestEditorFn) (*MoveResponse, error)

	// RegisterPlayerWithBodyWithResponse request with any body
	RegisterPlayerWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RegisterPlayerResponse, error)

	RegisterPlayerWithResponse(ctx context.Context, body RegisterPlayerJSONRequestBody, reqEditors ...RequestEditorFn) (*RegisterPlayerResponse, error)

	// GetSupportedEmojiWithResponse request
	GetSupportedEmojiWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSupportedEmojiResponse, error)

	// GetCurrentGameStateWithResponse request
	GetCurrentGameStateWithResponse(ctx context.Context, playerId openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetCurrentGameStateResponse, error)
}

type MoveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GameStateDTO
}

// Status returns HTTPResponse.Status
func (r MoveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r MoveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RegisterPlayerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PlayerRegistrationResponse
}

// Status returns HTTPResponse.Status
func (r RegisterPlayerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RegisterPlayerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSupportedEmojiResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Emoji
}

// Status returns HTTPResponse.Status
func (r GetSupportedEmojiResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSupportedEmojiResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCurrentGameStateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GameStateDTO
}

// Status returns HTTPResponse.Status
func (r GetCurrentGameStateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCurrentGameStateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// MoveWithBodyWithResponse request with arbitrary body returning *MoveResponse
func (c *ClientWithResponses) MoveWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*MoveResponse, error) {
	rsp, err := c.MoveWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMoveResponse(rsp)
}

func (c *ClientWithResponses) MoveWithResponse(ctx context.Context, body MoveJSONRequestBody, reqEditors ...RequestEditorFn) (*MoveResponse, error) {
	rsp, err := c.Move(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMoveResponse(rsp)
}

// RegisterPlayerWithBodyWithResponse request with arbitrary body returning *RegisterPlayerResponse
func (c *ClientWithResponses) RegisterPlayerWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RegisterPlayerResponse, error) {
	rsp, err := c.RegisterPlayerWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRegisterPlayerResponse(rsp)
}

func (c *ClientWithResponses) RegisterPlayerWithResponse(ctx context.Context, body RegisterPlayerJSONRequestBody, reqEditors ...RequestEditorFn) (*RegisterPlayerResponse, error) {
	rsp, err := c.RegisterPlayer(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRegisterPlayerResponse(rsp)
}

// GetSupportedEmojiWithResponse request returning *GetSupportedEmojiResponse
func (c *ClientWithResponses) GetSupportedEmojiWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSupportedEmojiResponse, error) {
	rsp, err := c.GetSupportedEmoji(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSupportedEmojiResponse(rsp)
}

// GetCurrentGameStateWithResponse request returning *GetCurrentGameStateResponse
func (c *ClientWithResponses) GetCurrentGameStateWithResponse(ctx context.Context, playerId openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetCurrentGameStateResponse, error) {
	rsp, err := c.GetCurrentGameState(ctx, playerId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCurrentGameStateResponse(rsp)
}

// ParseMoveResponse parses an HTTP response from a MoveWithResponse call
func ParseMoveResponse(rsp *http.Response) (*MoveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &MoveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GameStateDTO
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseRegisterPlayerResponse parses an HTTP response from a RegisterPlayerWithResponse call
func ParseRegisterPlayerResponse(rsp *http.Response) (*RegisterPlayerResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RegisterPlayerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PlayerRegistrationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetSupportedEmojiResponse parses an HTTP response from a GetSupportedEmojiWithResponse call
func ParseGetSupportedEmojiResponse(rsp *http.Response) (*GetSupportedEmojiResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSupportedEmojiResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Emoji
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetCurrentGameStateResponse parses an HTTP response from a GetCurrentGameStateWithResponse call
func ParseGetCurrentGameStateResponse(rsp *http.Response) (*GetCurrentGameStateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCurrentGameStateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GameStateDTO
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
